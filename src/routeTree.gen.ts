/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginformRouteImport } from './routes/loginform'
import { Route as AboutRouteImport } from './routes/about'
import { Route as NewUserpageRouteImport } from './routes/NewUserpage'
import { Route as IndexRouteImport } from './routes/index'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginformRoute = LoginformRouteImport.update({
  id: '/loginform',
  path: '/loginform',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const NewUserpageRoute = NewUserpageRouteImport.update({
  id: '/NewUserpage',
  path: '/NewUserpage',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/NewUserpage': typeof NewUserpageRoute
  '/about': typeof AboutRoute
  '/loginform': typeof LoginformRoute
  '/signup': typeof SignupRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/NewUserpage': typeof NewUserpageRoute
  '/about': typeof AboutRoute
  '/loginform': typeof LoginformRoute
  '/signup': typeof SignupRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/NewUserpage': typeof NewUserpageRoute
  '/about': typeof AboutRoute
  '/loginform': typeof LoginformRoute
  '/signup': typeof SignupRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/NewUserpage' | '/about' | '/loginform' | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/NewUserpage' | '/about' | '/loginform' | '/signup'
  id: '__root__' | '/' | '/NewUserpage' | '/about' | '/loginform' | '/signup'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NewUserpageRoute: typeof NewUserpageRoute
  AboutRoute: typeof AboutRoute
  LoginformRoute: typeof LoginformRoute
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/loginform': {
      id: '/loginform'
      path: '/loginform'
      fullPath: '/loginform'
      preLoaderRoute: typeof LoginformRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/NewUserpage': {
      id: '/NewUserpage'
      path: '/NewUserpage'
      fullPath: '/NewUserpage'
      preLoaderRoute: typeof NewUserpageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NewUserpageRoute: NewUserpageRoute,
  AboutRoute: AboutRoute,
  LoginformRoute: LoginformRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
